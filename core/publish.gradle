def LIB_GROUP_ID = 'com.afterroot.core'
def LIB_ARTIFACT_ID = 'core'
def LIB_VERSION = myVersion

group LIB_GROUP_ID
version LIB_VERSION

project.ext {
	mavGitUrl = 'https://maven.pkg.github.com/afterroot/core'
	mavLibraryDescription = "Core Package for AfterROOT Apps"
	mavLibraryLicenses = ["Apache-2.0": 'http://www.apache.org/licenses/LICENSE-2.0.txt']
	mavProjectName = 'core'
	mavPublishToMavenLocal = true
	mavSiteUrl = 'https://afterroot.web.app'
}

task sourceJar(type: Jar) {
	from android.sourceSets.main.java.srcDirs
	classifier "sources"
}

if (file("publish.properties").exists()) {
	def properties = new Properties()
	properties.load(new FileInputStream(file("publish.properties")))

	//Publish to GitHub Packages
	publishing {
		repositories {
			maven {
				name = "GitHubPackages"
				description = mavLibraryDescription
				url = uri("https://maven.pkg.github.com/afterroot/core")
				credentials {
					username = properties.getProperty("gpr.user") ?: System.getenv("USERNAME")
					password = properties.getProperty("gpr.key") ?: System.getenv("TOKEN")
				}
			}
			maven {
				name = 'CustomMavenRepo'
				url = "file://${buildDir}/repo"
			}
		}
		publications {
			core(MavenPublication) {
				groupId LIB_GROUP_ID
				artifactId LIB_ARTIFACT_ID
				version LIB_VERSION
				artifact("$buildDir/outputs/aar/core-release.aar")
				artifact(sourceJar)

				pom.withXml {
					def dependenciesNode = asNode().appendNode('dependencies')

					//Iterate over the compile dependencies (we don't want the test ones), adding a <dependency> node for each
					configurations.api.allDependencies.each {
						def dependencyNode = dependenciesNode.appendNode('dependency')
						dependencyNode.appendNode('groupId', it.group)
						dependencyNode.appendNode('artifactId', it.name)
						dependencyNode.appendNode('version', it.version)
					}
				}
			}
		}
	}
} else {
	logger.log(LogLevel.ERROR, "publish.properties file not found. Please add publish.properties to module root.")
}
